# -*- coding: utf-8 -*-
"""note.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cb2nsnLrsh-Txu7jCnDJRYlijFCcLbNQ
"""

pip install pycountry_convert

import warnings
import numpy as np
import pandas as pd
import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt
from scipy import stats
from pycountry_convert import country_alpha2_to_continent_code, country_name_to_country_alpha2

df = pd.read_csv("/content/Life Expectancy Data.csv")

df.head()

df.tail()

df.columns

df.dtypes

df.isna().sum()

col_with_null_values = ['Life expectancy ', 'Adult Mortality', 'Alcohol', 'Hepatitis B', ' BMI ', 'Polio', 'Total expenditure',
       'Diphtheria ', 'GDP', 'Population',' thinness  1-19 years', ' thinness 5-9 years','Income composition of resources', 'Schooling']
for i in col_with_null_values:
    median = df[i].median()
    df[i].fillna(value=median, inplace = True)

country_vs_life = df.groupby('Country', as_index=False)['Life expectancy '].mean()
country_vs_life.sort_values(by = 'Life expectancy ', ascending=False).head(10)

country_vs_life.sort_values(by = 'Life expectancy ', ascending = True).head(10)

continents = {
    'NA': 'North America',
    'SA': 'South America',
    'AS': 'Asia',
    'OC': 'Australia',
    'AF': 'Africa',
    'EU': 'Europe'
}
continent = []
for country in df['Country']:
    try:
        continent.append(continents[(country_alpha2_to_continent_code(country_name_to_country_alpha2(country)))])
    except:
        continent.append("Africa")

df["Continent"] = continent
to_bubble = df[["Country", "Year", "Life expectancy ", "GDP", "Population", "Continent"]]
to_bubble.dropna(inplace = True)

d = to_bubble.drop('Year', axis=1)
to_bubble = d.groupby(['Country', 'Continent']).mean().reset_index()
to_bubble['GDP'] = np.log10(to_bubble['GDP'])
to_bubble.head()

pic = px.data.gapminder()

fig = px.scatter(to_bubble, x="GDP", y="Life expectancy ",
                 size="Population", color="Continent",
                 hover_name="Country", log_x=True, size_max=40)
fig.show()



count = 1

fig = plt.figure(figsize = [20, 10])
cols = df.select_dtypes(exclude=['object']).columns.tolist()

for col in cols:
    plt.subplot(5, 4, count)
    sns.boxplot(x = df[col])
    count += 1
plt.tight_layout()
plt.show()

Q1 = df[cols].quantile(0.25)
Q3 = df[cols].quantile(0.75)
IQR = Q3 - Q1

outliers = ((df[cols] < (Q1 - 1.7 * IQR)) | (df[cols] > (Q3 + 1.7 * IQR))).any(axis=1)

df = df[~outliers]

df.head()

plt.figure(figsize=(15,10))
sns.heatmap(df.corr(),annot=True,cmap='Greens')
plt.show()

sns.histplot(df['Life expectancy '].dropna(),kde=True,color='orange')

l= [df['Life expectancy '].dropna(),df['Income composition of resources'].dropna(),df['Schooling'].dropna()]
for i in l:
    plt.figure(figsize=(20,5))
    sns.histplot(i, kde=True, color="orange")

from sklearn.preprocessing import LabelEncoder
end=LabelEncoder()
df['Country']=end.fit_transform(df['Country'])
df['Status']=end.fit_transform(df['Status'])
df['Continent']=end.fit_transform(df['Continent'])
df

x=df.drop(['Life expectancy '],axis=1)
x

y=df['Life expectancy ']
y

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.30,random_state=42)



from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression

from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
from sklearn.metrics import confusion_matrix ,ConfusionMatrixDisplay



model = RandomForestRegressor(random_state=42)
model.fit(x_train, y_train)

feature_importance = model.feature_importances_

# Creating a DataFrame to associate feature names with their importances
feature_importance_df = pd.DataFrame({'Feature': x.columns, 'Importance': feature_importance})

# Sorting the features by importance
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

plt.figure(figsize=(10, 6))
plt.barh(feature_importance_df['Feature'], feature_importance_df['Importance'])
plt.xlabel('Feature Importance')
plt.ylabel('Feature Name')
plt.title('Feature Importance')
plt.show()

model_name= []
RMSE = []
R2_score = []

models = [
    DecisionTreeRegressor(random_state = 42),
    RandomForestRegressor(random_state = 42),
    LinearRegression()
]

for model in models :
    model.fit(x_train , y_train)

    prediction = model.predict(x_test)

    model_name.append(model.__class__.__name__)

    RMSE.append(str(mean_squared_error( prediction , y_test, squared=False )))
    R2_score.append(str(r2_score( y_test , prediction ) * 100 ) + " %")

models_df = pd.DataFrame({"Model-Name":model_name, "RMSE": RMSE, "R2_Score":R2_score})
models_df = models_df.set_index('Model-Name')
models_df.sort_values("R2_Score", ascending = False)

model = RandomForestRegressor(random_state=42)
model.fit(x_train, y_train)

model_predictions = model.predict(x_test)
residuals = model_predictions - y_test

plt.figure(figsize=(20,5))
sns.histplot(residuals, kde=True, color="orange")
plt.title('Residual Plot')
plt.xlabel('Residuals: (Predictions - Actual)')
plt.ylabel('Density');

from sklearn.metrics import r2_score
print("R-squared Score Obtained for predicting Life Expectancy is {0}".format(r2_score(y_test, model_predictions)))